{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const StatusFilters = {\n  All: 'all',\n  Active: 'active',\n  Completed: 'completed'\n};\nconst initialState = {\n  status: StatusFilters.All,\n  colors: []\n};\nconst filtersSlice = createSlice({\n  name: 'filters',\n  initialState,\n  reducers: {\n    statusFilterChanged(state, action) {\n      state.status = action.payload;\n    },\n\n    colorFilterChanged: {\n      reducer(state, action) {\n        let {\n          color,\n          changeType\n        } = action.payload;\n        const {\n          colors\n        } = state;\n\n        switch (changeType) {\n          case 'added':\n            {\n              if (!colors.includes(color)) {\n                colors.push(color);\n              }\n\n              break;\n            }\n\n          case 'removed':\n            {\n              state.colors = colors.filter(existingColor => existingColor !== color);\n            }\n\n          default:\n            return;\n        }\n      },\n\n      prepare(color, changeType) {\n        return {\n          payload: {\n            color,\n            changeType\n          }\n        };\n      }\n\n    }\n  }\n});\nexport const {\n  colorFilterChanged,\n  statusFilterChanged\n} = filtersSlice.actions;\nexport default filtersSlice.reducer;","map":{"version":3,"names":["createSlice","StatusFilters","All","Active","Completed","initialState","status","colors","filtersSlice","name","reducers","statusFilterChanged","state","action","payload","colorFilterChanged","reducer","color","changeType","includes","push","filter","existingColor","prepare","actions"],"sources":["/Users/meishenyin/Desktop/Westcliff/m6-w2-d2-demo-/src/features/filters/filtersSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const StatusFilters = {\n  All: 'all',\n  Active: 'active',\n  Completed: 'completed',\n}\n\nconst initialState = {\n  status: StatusFilters.All,\n  colors: [],\n}\n\nconst filtersSlice = createSlice({\n  name: 'filters',\n  initialState,\n  reducers: {\n    statusFilterChanged(state, action) {\n      state.status = action.payload\n    },\n    colorFilterChanged: {\n      reducer(state, action) {\n        let { color, changeType } = action.payload\n        const { colors } = state\n        switch (changeType) {\n          case 'added': {\n            if (!colors.includes(color)) {\n              colors.push(color)\n            }\n            break\n          }\n          case 'removed': {\n            state.colors = colors.filter(\n              (existingColor) => existingColor !== color\n            )\n          }\n          default:\n            return\n        }\n      },\n      prepare(color, changeType) {\n        return {\n          payload: { color, changeType },\n        }\n      },\n    },\n  },\n})\n\nexport const { colorFilterChanged, statusFilterChanged } = filtersSlice.actions\n\nexport default filtersSlice.reducer\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,aAAa,GAAG;EAC3BC,GAAG,EAAE,KADsB;EAE3BC,MAAM,EAAE,QAFmB;EAG3BC,SAAS,EAAE;AAHgB,CAAtB;AAMP,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAEL,aAAa,CAACC,GADH;EAEnBK,MAAM,EAAE;AAFW,CAArB;AAKA,MAAMC,YAAY,GAAGR,WAAW,CAAC;EAC/BS,IAAI,EAAE,SADyB;EAE/BJ,YAF+B;EAG/BK,QAAQ,EAAE;IACRC,mBAAmB,CAACC,KAAD,EAAQC,MAAR,EAAgB;MACjCD,KAAK,CAACN,MAAN,GAAeO,MAAM,CAACC,OAAtB;IACD,CAHO;;IAIRC,kBAAkB,EAAE;MAClBC,OAAO,CAACJ,KAAD,EAAQC,MAAR,EAAgB;QACrB,IAAI;UAAEI,KAAF;UAASC;QAAT,IAAwBL,MAAM,CAACC,OAAnC;QACA,MAAM;UAAEP;QAAF,IAAaK,KAAnB;;QACA,QAAQM,UAAR;UACE,KAAK,OAAL;YAAc;cACZ,IAAI,CAACX,MAAM,CAACY,QAAP,CAAgBF,KAAhB,CAAL,EAA6B;gBAC3BV,MAAM,CAACa,IAAP,CAAYH,KAAZ;cACD;;cACD;YACD;;UACD,KAAK,SAAL;YAAgB;cACdL,KAAK,CAACL,MAAN,GAAeA,MAAM,CAACc,MAAP,CACZC,aAAD,IAAmBA,aAAa,KAAKL,KADxB,CAAf;YAGD;;UACD;YACE;QAbJ;MAeD,CAnBiB;;MAoBlBM,OAAO,CAACN,KAAD,EAAQC,UAAR,EAAoB;QACzB,OAAO;UACLJ,OAAO,EAAE;YAAEG,KAAF;YAASC;UAAT;QADJ,CAAP;MAGD;;IAxBiB;EAJZ;AAHqB,CAAD,CAAhC;AAoCA,OAAO,MAAM;EAAEH,kBAAF;EAAsBJ;AAAtB,IAA8CH,YAAY,CAACgB,OAAjE;AAEP,eAAehB,YAAY,CAACQ,OAA5B"},"metadata":{},"sourceType":"module"}